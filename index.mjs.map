{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport reverseCodeUnit from '@stdlib/string-base-reverse';\nimport reverseCodePoints from '@stdlib/string-base-reverse-code-points';\nimport reverseGraphemeClusters from '@stdlib/string-base-reverse-grapheme-clusters';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar MODES = [ 'grapheme', 'code_point', 'code_unit' ];\nvar FCNS = {\n\t'grapheme': reverseGraphemeClusters,\n\t'code_point': reverseCodePoints,\n\t'code_unit': reverseCodeUnit\n};\nvar isMode = contains( MODES );\n\n\n// MAIN //\n\n/**\n* Reverses a string.\n*\n* @param {string} str - input string\n* @param {Options} [options] - options\n* @param {string} [options.mode=\"grapheme\"] - type of \"character\" to return (must be either `grapheme`, `code_point`, or `code_unit`)\n* @throws {TypeError} must provide a string primitive\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} reversed string\n*\n* @example\n* var out = reverse( 'last man standing' );\n* // returns 'gnidnats nam tsal'\n*\n* @example\n* var out = reverse( 'presidential election' );\n* // returns 'noitcele laitnediserp'\n*\n* @example\n* var out = reverse( 'javaScript' );\n* // returns 'tpircSavaj'\n*\n* @example\n* var out = reverse( 'Hidden Treasures' );\n* // returns 'serusaerT neddiH'\n*/\nfunction reverse( str ) {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( '1PL3F', str ) );\n\t}\n\topts = {\n\t\t'mode': 'grapheme'\n\t};\n\tnargs = arguments.length;\n\tif ( nargs > 1 ) {\n\t\toptions = arguments[ 1 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( '1PL2V', options ) );\n\t\t}\n\t}\n\tif ( options ) {\n\t\tif ( hasOwnProp( options, 'mode' ) ) {\n\t\t\topts.mode = options.mode;\n\t\t\tif ( !isMode( opts.mode ) ) {\n\t\t\t\tthrow new TypeError( format( '1PLE1', 'mode', MODES.join( '\", \"' ), opts.mode ) );\n\t\t\t}\n\t\t}\n\t}\n\treturn FCNS[ opts.mode ]( str );\n}\n\n\n// EXPORTS //\n\nexport default reverse;\n"],"names":["MODES","FCNS","grapheme","reverseGraphemeClusters","code_point","reverseCodePoints","code_unit","reverseCodeUnit","isMode","contains","reverse","str","options","opts","isString","TypeError","format","mode","arguments","length","isPlainObject","hasOwnProp","join"],"mappings":";;szBAkCA,IAAIA,EAAQ,CAAE,WAAY,aAAc,aACpCC,EAAO,CACVC,SAAYC,EACZC,WAAcC,EACdC,UAAaC,GAEVC,EAASC,EAAUT,GAgCvB,SAASU,EAASC,GACjB,IAAIC,EAEAC,EAEJ,IAAMC,EAAUH,GACf,MAAM,IAAII,UAAWC,EAAQ,QAASL,IAMvC,GAJAE,EAAO,CACNI,KAAQ,YAEDC,UAAUC,OACL,IAENC,EADNR,EAAUM,UAAW,IAEpB,MAAM,IAAIH,UAAWC,EAAQ,QAASJ,IAGxC,GAAKA,GACCS,EAAYT,EAAS,UACzBC,EAAKI,KAAOL,EAAQK,MACdT,EAAQK,EAAKI,OAClB,MAAM,IAAIF,UAAWC,EAAQ,QAAS,OAAQhB,EAAMsB,KAAM,QAAUT,EAAKI,OAI5E,OAAOhB,EAAMY,EAAKI,MAAQN,EAC3B"}